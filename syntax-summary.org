This is a summary of
[[https://orgmode.org/worg/exporters/org-element-docstrings.html]] and [[https://orgmode.org/worg/dev/org-syntax.html]].

* Shared behavior

Each greater element, element and object has a fixed set of properties
attached to it. The following are shared by all types:

- ~begin~ and ~end~ :: refer to the beginning and ending position of the element
  or object
- ~post-blank~ :: number of blank lines or whitespaces at the end
- ~parent~ :: refers to the element or object containing it

Greater elements, elements and objects containing objects also have:

- ~content-begin~ and ~content-end~ :: used to delimit content

Greater elements and elements accepting affiliated keywords have:

- ~post-affiliated~ :: refers to the position after all such keywords

* Syntax

Except where mentioned capitalization of the syntax is ignored.

* Elements

Elements describe the structure of an org file.

Most elements can contain objects and/or plain text.

Except the following all elements start and end at the beginning of a line:

- Clock
- Headline
- Inlinetask
- Item
- Planning
- Node property
- Quote section
- Section
- Table row

Elements accept a fixed set of keywords as attributes. These are called
affiliated keywords (not to be confused with regular keywords which are
actual elements).

Some elements have special properties whose value can hold objects
themselves. These values are called *secondary strings*.

** Blocks

- Center block (~CENTER~)
- Comment block (~COMMENT~)
- Dynamic block
- Example block (~EXAMPLE~)
- Export block (~EXPORT~)
- Quote block (~QUOTE~)
- Special block
- Src block (~SRC~)
- Verse block (~VERSE~)

*** Syntax

Except for dynamic blocks they follow this syntax:

#+BLOCK_SRC org
  #+BEGIN_NAME PARAMETERS
  CONTENTS
  #+END_NAME
#+END_SRC

~NAME~ can contain any non-whitespace character. Name determines the type of
the block. If name is none of the above mentioned it is a /special block/.

~PARAMETER~ can contain any character other than new line and can be omitted.

~CONTENTS~ can contain any elements except a line ~#+END_NAME~ on its own.
Lines beginning with stars must be quoted by a comma.

** Babel call

*** Syntax

This is a guess of the syntax and meaning based on the parse code.

#+BEGIN_SRC org
  #+CALL: FUNCTION[INSIDE-HEADER](ARGUMENTS) END-HEADER
#+END_SRC

~FUNCTION~ is the name of a /source block/ to execute.

~INSIDE-HEADER~ can contain everything but ~]~ and a newline.

~ARGUMENTS~ can contain everything but ~)~ and a newline.

~END-HEADER~ can contain everything but a newline.

*** Properties

- call: the function/code block to call
- inside-header
- arguments: arguments to the function/code block
- end-header
- begin
- end
- value: everything after the ~:~ as a string
- post-blank
- post-affiliated
- and all affiliated keywords

** Center block

*** Syntax

See syntax for blocks.

*** Properties

- begin
- end
- hiddenp
- contents-begin
- contents-end
- post-blank
- post-affiliated
- and all affiliated keywords

** Clock

*** Syntax

#+BEGIN_SRC org
  CLOCK: TIMESTAMP DURATION
#+END_SRC

~TIMESTAMP~ and ~DURATION~ are optional.

~TIMESTAMP~ is a /timestamp/ object.

~DURATION~ follows the pattern: ~=> HH:MM~. ~HH~ is a number containing any
number of digits. ~MM~ is a two digit number.

*** Properties

- status: either closed (if duration is set) or running (if duration is not
  set)
- value: a timestamp
- duration: a duration
- begin
- end
- post-blank
- post-affiliated = begin

** Comment

*** Syntax

#+BEGIN_SRC org
  # CONTENTS
#+END_SRC

A line starting with a ~#~ and space (or end of line). Optionally preceded
with whitespace.

~CONTENTS~ can be any string (except newline). If multiple comments are
accumulated the newline will be stored a well.

Consecutive comment lines are accumulated into one comment (without leading
~#~).

*** Properties

- begin
- end
- value
- post-blank
- post-affiliated
- and all affiliated keywords

** Comment block

*** Syntax

See /blocks/.

*** Properties

- begin
- end
- value
- post-blank
- post-affiliated
- and any affiliated keywords

** Diary sexp

*** Syntax

#+BEGIN_SRC org
  %%(VALUE
#+END_SRC

~VALUE~ can contain any character except a newline. The expression has to
start at column 0.

*** Properties

- begin
- end
- value: the entire value (with ~%%(~)
- post-blank
- post-affiliated
- and any affiliated keywords

** Drawer

*** Syntax

#+BEGIN_SRC org
  :NAME:
  CONTENTS
  :END:
#+END_SRC

~NAME~ can contain word-constituent characters, hyphens and underscores.

~CONTENTS~ can contain any element but another drawer.

*** Properties

- drawer-name
- begin
- end
- hiddenp
- contents-begin
- contents-end
- post-blank
- post-affiliated
- and all affiliated keywords

** Dynamic block

*** Syntax

#+BEGIN_SRC org
  #+BEGIN: NAME PARAMETERS
  CONTENTS
  #+END:
#+END_SRC

~NAME~ cannot contain any whitespace characters.

~PARAMETERS~ can contain any character and can be omitted.

The ~:~ after ~END~ should be present but it is still parsed if it is
missing.

*** Properties

- block-name
- begin
- end
- hiddenp
- contents-begin
- contents-end
- arguments
- post-blank
- post-affiliated
- and all affiliated keywords

** Example block

*** Syntax

See /blocks/.

~PARAMETERS~ can contain the following flags:

- continued number-lines :: ~+n AMOUNT~
- new number-lines :: ~-n AMOUNT~
- preserve-indent :: ~-i>~
- retain-labels :: ~-r>~
- not use-labels :: ~-k>~
- label-fmt :: ~-l "FMT"~ where ~FMT~ is anything but ~"~ and newline.

*** Properties

- begin
- end
- value
- switches: the ~PARAMETERS~ string of the block
- number-lines: tuple (kind, number) where kind is either new or continued
- preserve-indent
- retain-labels
- use-labels: flag, if code-references should use labels or line-numbers
- label-fmt
- post-blank
- post-affiliated
- and any affiliated keywords

** Export block

*** Syntax

See /blocks/.

Where the ~PARAMETERS~ string is the backend (case is ignored).

*** Properties

- type: the ~PARAMETERS~ string of the block
- begin
- end
- value
- post-blank
- post-affiliated
- and all affiliated keywords

** Fixed width

*** Syntax

A line beginning with ~:~ followed by a whitespace or end of line.
Consecutive fixed width lines are accumulated. The ~:~ can be preceded by
optional whitespace.

*** Properties

- begin
- end
- value
- post-blank
- post-affiliated
- and all affiliated keywords

** Footnote definition

*** Syntax

#+BEGIN_SRC org
  [LABEL] CONTENTS
#+END_SRC

~LABEL~ is either a number or follows the pattern ~fn:WORD~, where ~WORD~ can
contain any word-constituent character, hyphens and underscore characters.

~CONTENTS~ can contain any element except another footnote definition. It
ends at the next footnote definition, headline, two consecutive empty lines
or the end of buffer.

*** Properties

- label
- begin
- end
- contents-begin
- contents-end
- pre-blank: blank lines after ~[LABEL]~
- post-blank
- post-affiliated
- and all affiliated keywords

** Headline

Can contain the standard set of objects without line breaks in its /title/.

*** Syntax

#+BEGIN_SRC
  STARS KEYWORD PRIORITY TITLE TAGS
#+END_SRC

~STARS~ is a string starting at column 0, containing at least one asterisk.
This is used to define the level of the headline. This is the only required
part of a headline. If other syntax follows there has to be a single space
(or tab) after the stars.

~KEYWORD~ is a todo keyword. Case is significant. If other syntax follows there has to be a single
space (or tab) after keyword.

~PRIORITY~ is a priority cookie of the form: ~[#A]~ where ~A~ can be any
letter. Capital letters are recommended.

~TITLE~ can be made of any character but a new line. If the first word in
~TITLE~ is ~COMMENT~, the headline will be considered as /commented/. Case is
significant. If ~TITLE~ is ~org-footnote-section~, it will be considered as a
footnote section. Case is significant.

~TAGS~ is made of words containing any alpha-numeric character, underscore,
at sign, hash sign or percent sign. Tags are separated and surrounded by
~:~s. If ~TAGS~ contains the ~ARCHIVE~ tag, it will be considered /archived/.
Case is significant. There can be an arbitrary amount of whitespace (except
newlines) between title and tags. But tags are usually right aligned at a
specified column.

*** Properties

- raw-value
- title
- alt-title
- begin
- end
- pre-blank: blank lines before the content starts
- post-blank
- hiddenp
- contents-begin
- contents-end
- level
- priority
- tags
- todo-keyword
- todo-type
- scheduled
- deadline
- closed
- quotedp
- archivedp
- commentedp
- footnote-section-p
- and all properties (names in upper case) of the property drawer
- post-affiliated

** Horizontal rule

*** Syntax

A line of at least 5 consecutive hyphens (~-----~). Can be indented.

*** Properties

- begin
- end
- post-blank
- post-affiliated
- and all affiliated keywords

** Inlinetask

Can contain the standard set of objects without line breaks in its /title/.

*** Syntax

Same syntax as /headline/ but starts with at least /org-inlinetask-min-level/
asterisks.

Inline tasks can be ended with a line of /org-inlinetask-min-kevek/
asterisk characters (should be starting at column 0 but this is not strictly
required), followed by a sapce and the ~END~ string.

*** Properties

- raw-value
- title
- begin
- end
- pre-blank: blank lines before the content starts
- post-blank
- hiddenp
- contents-begin
- contents-end
- level
- priority
- tags
- todo-keyword
- todo-type
- scheduled
- deadline
- closed
- post-blank
- and all properties (names in upper case) of the property drawer
- post-affiliated

** Item

Can contain the standard set of objects without line breaks in its /tag/.

*** Syntax

#+BEGIN_SRC org
  BULLET COUNTER-SET CHECKBOX TAG
#+END_SRC

Only ~BULLET~ is required. ~BULLET~ is either an asterisk, a hyphen, a plus
sign (for unordered lists) or follows the pattern ~COUNTER.~ or ~COUNTER)~
(for ordered lists). ~BULLET~ is always followed by a whitespace character
(or line ending).

~COUNTER~ is a number or a single letter.

~COUNTER-SET~ follows the pattern ~[@COUNTER]~.

~CHECKBOX~ is either a single whitespace character, a ~X~ or a hyphen. It is
enclosed in squeare brackets.

~TAG~ follows the pattern ~TAG-TEXT ::~ where ~TAG-TEXT~ can contain any
character except a new line.

An item ends before the next item, the first line that is less or equally
indented than its starting line, or two consecutive empty lines. Indentation
of lines within other greater elements including inlinetask boundaries are ignored.

A *plain list* is a set of consecutive items of the same indentation. It can
only directly contain items.

If the first item in a plain list has a ~COUNTER~ in its ~BULLET~ the plain
list will be an *ordered plain list*. If it contains a tag, it will be a
*descriptive list*. Otherwise it will be an *unordered list*.

*** Properties

- bullet
- begin
- end
- contents-begin
- contents-end
- checkbox: either off (space), on (X) or trans (-)
- counter
- tag
- structure
- hiddenp
- post-blank
- post-affiliated

** Keyword

Can contain the standard set of objects

*** Syntax

Similar to /affiliated keywords/. Orphaned affiliated keywords are considered
a regular keyword.

#+BEGIN_SRC org
  #+KEY: VALUE
#+END_SRC

~KEY~ can contain any non-whitespace character. But it cannot be equal to
~CALL~ or any affilaited keyword.

~VALUE~ can contain any character except a newline.

If ~KEY~ is a /document property/, ~VALUE~ can contain objects.

*** Properties

- key
- value
- begin
- end
- post-blank
- post-affiliated
- and all affiliated keywords

** Latex environment



** Node property
** Paragraph
Can contain the standard set of objects
** Plain list

*** Syntax

See /item/.

*** Properties

- type
- begin
- end
- contents-begin
- contents-end
- structure
- post-blank
- post-affiliated
- and all affiliated keywords

** Planning
** Property drawer

*** Syntax

Property drawers can be directly below headlines (after planning if
existent). Its syntax is similar to /drawers/.

#+BEGIN_SRC org
  :PROPERTIES:
  CONTENTS
  :END:
#+END_SRC

~CONTENTS~ consists of zero or more /node properties/.

*** Properties

- begin
- end
- hiddenp
- contents-begin
- contents-end
- post-blank
- post-affiliated

** Quote block

*** Syntax

See /blocks/.

*** Properties

- begin
- end
- hiddenp
- contents-begin
- contents-end
- post-blank
- post-affiliated
- and all affiliated keywords

** Quote section
** Section

*** Syntax

A section contains directly any (greater) element. Only a headline can
contain a section. Also text before the first headline in the document
belongs to a section.

A section ends at the beginning of the next headline or the end of the file.

*** Properties

- begin
- end
- contents-begin
- contents-end
- post-blank

** Special block

*** Syntax

See /blocks/.

*** Properties

- type
- begin
- end
- hiddenp
- contents-begin
- contents-end
- post-blank
- post-affiliated
- and all affiliated keywords

** Src block
** Table
** Table row
Can contain tabe cells
** Verse block
Can contain the standard set of objects

* Greater elements

Elements containing other elements are called greater elements. These are:

- Center block
- Drawer
- Dynamic block
- Footnote definition
- Headline
- Inlinetask
- Item
- Plain list
- Property drawer
- Quote block
- Section
- Special block

With the exception of headline and item greater elements can not contain
greater elements of the same type.


* Objects

Objects are related to the org file content. Objects belong to either an
element or a secondary string.

Some objects can recursively contain other objects. For later reference the
following standard set of objects is defined here:

- Export snippet
- Footnote reference
- Inline babel call
- Inline src block
- Latex or entity
- Line break
- Link
- Macro
- Radio target
- Statistics cookie
- Sub/Superscript
- Target
- Text markup
- Timestamp

** Bold
Recursive, can contain the standard set
** Code
** Entity
** Export snippet
** Footnote reference
Can contain the standard set in its inline definition
** Inline babel call
** Inline src block
** Italic
Recursive, can contain the standard set
** Latex fragment
** Line break
** Link
Recursive, can contain: export snippet, inline babel call, inline src block,
latex fragment, entity, macro, plain link, statistics cookie, sub/superscript,
text markup
** Macro
** Radio target
Recursive, can contain: latex fragment, entity, sub/superscript
** Statistics cookie
** Strike through
Recursive, can contain the standard set
** Subscript
Recursive, can contain the standard set
** Superscript
Recursive, can contain the standard set
** Table cell
Recursive, can contain: export snippet, footnote reference, latex fragment,
entity, link, macro, radio target, sub/superscript, target, text markup,
timestamp
** Target
** Text markup
** Timestamp
** Underline
Recursive, can contain the standard set
** Verbatim

* Affiliated keywords

Affiliated keywords (not to be confused with actual keywords) are no actual
elements or objects. But they are attributes of the element or object they
precede.

They follow the following patterns:

- ~#+KEY: VALUE~
- ~#+KEY[OPTIONAL]: VALUE~
- ~#+ATTR_BACKEND: VALUE~

The following affiliated keywords are recognized:

- ~CAPTION~
- ~HEADER~
  + ~HEADERS~ will be renamed to ~HEADER~
- ~NAME~
  + ~LABEL~ will be renamed to ~NAME~
  + ~SRCNAME~ will be renamed to ~NAME~
  + ~TBLNAME~ will be renamed to ~NAME~
  + ~DATA~ will be renamed to ~NAME~
  + ~RESNAME~ will be renamed to ~NAME~
- ~PLOT~
- ~RESULTS~
  + ~RESULT~ will be renamed to ~RESULTS~
- ~SOURCE~
- and ~ATTR_~ followed by any string consisting of alpha-numeric characters,
  hyphens and underscores

The nested keywords above are deprecate and you should use the mentioned
replacement.

Only ~CAPTION~ and ~RESULTS~ can have a secondary value.

Only ~CAPTION~, ~HEADER~ and ~ATTR_something~ keywords can occur more than
once in an element. Their value will then be a list of strings.

Only ~CAPTION~s (secondary) value can have objects in it. The value
of ~CAPTION~ will be stored in a *secondary string*.

* Document properties

The syntax is the same as *affiliated keywords* but they apply to the whole
document. Their values can contain *objects* and are stored as *secondary
strings*.

Document properties are:

- ~AUTHOR~
- ~DATE~
- ~TITLE~

* Secondary string

This is simply a list of strings and objects. It is used where properties or
attributes can contain actual objects instead of just text.



export-snippet footnote-reference inline-babel-call inline-src-block
latex-or-entity line-break link macro plain-link radio-target
statistics-cookie sub/superscript table-cell target
text-markup timestamp


-----






* File
** Category (defaults to filename)
** Meta (keywords)
** Preface (section)
** Entries

* Entry
** Attributes (affiliated keywords)
** Headline
*** Todo Keyword
*** Priority
*** Title
*** Tags
*** Planning information
*** Properties
** Section

* Tree

Entries organized in a tree

* Todo Keyword

Either:

- TODO (Active)
- DONE (Inactive)

Can be configured with e.g.: ~#+SEQ_TODO: INVOICE(i) MAIL(m) WAITING(w) FOLLOWUP(f) | RECEIVED(r)~
