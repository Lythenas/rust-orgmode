//! The `Document` struct represents an entire org file.

use super::*;

/// A complete org document/file.
///
/// Contains the global document properties and section before the first headline as well as the
/// list of all top level headlines.
#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]
pub struct Document {
    pub preface: Option<greater_elements::Section>,
    pub headlines: Vec<greater_elements::Headline>,
}

impl Document {
    /// Gets an iterator over all keywords in the documents preface.
    ///
    /// TODO maybe make this iterate over all keywords (not affiliated keywords) in the whole
    /// document not just in the preface.
    pub fn keywords(&self) -> Keywords<'_> {
        unimplemented!()
    }
}

use crate::parsing::Rule;
use pest::iterators::Pair;
use std::iter::FromIterator;
impl<'a> FromIterator<Pair<'a, Rule>> for Document {
    fn from_iter<I: IntoIterator<Item = Pair<'a, Rule>>>(_iter: I) -> Self {
        unimplemented!();
    }
}

/// An iterator over all [`Keyword`]s in the [`Document::preface`].
///
/// This `struct` is currently only created by the [`keywords`] method on [`Document`]. In the
/// future it may be renamed and generated by methods on other elements.
///
/// [`Keyword`]: `elements::Keyword`
/// [`keywords`]: `Document::keywords`
#[derive(Debug, Clone)]
pub struct Keywords<'a> {
    // TODO actually implement this iterator maybe as abstraction over other iterators
    document: &'a Document,
}

impl<'a> Iterator for Keywords<'a> {
    type Item = &'a elements::Keyword;

    fn next(&mut self) -> Option<Self::Item> {
        unimplemented!()
    }
}
